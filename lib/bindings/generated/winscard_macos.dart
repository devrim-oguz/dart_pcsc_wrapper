// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Mac OS bindings for pcsc lib
class WinscardMacOS {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WinscardMacOS(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WinscardMacOS.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<SCARD_IO_REQUEST> _g_rgSCardT0Pci =
      _lookup<SCARD_IO_REQUEST>('g_rgSCardT0Pci');

  SCARD_IO_REQUEST get g_rgSCardT0Pci => _g_rgSCardT0Pci.ref;

  late final ffi.Pointer<SCARD_IO_REQUEST> _g_rgSCardT1Pci =
      _lookup<SCARD_IO_REQUEST>('g_rgSCardT1Pci');

  SCARD_IO_REQUEST get g_rgSCardT1Pci => _g_rgSCardT1Pci.ref;

  late final ffi.Pointer<SCARD_IO_REQUEST> _g_rgSCardRawPci =
      _lookup<SCARD_IO_REQUEST>('g_rgSCardRawPci');

  SCARD_IO_REQUEST get g_rgSCardRawPci => _g_rgSCardRawPci.ref;

  ffi.Pointer<ffi.Char> pcsc_stringify_error(
    int arg0,
  ) {
    return _pcsc_stringify_error(
      arg0,
    );
  }

  late final _pcsc_stringify_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LONG)>>(
          'pcsc_stringify_error');
  late final _pcsc_stringify_error = _pcsc_stringify_errorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int SCardEstablishContext(
    int dwScope,
    LPCVOID pvReserved1,
    LPCVOID pvReserved2,
    LPSCARDCONTEXT phContext,
  ) {
    return _SCardEstablishContext(
      dwScope,
      pvReserved1,
      pvReserved2,
      phContext,
    );
  }

  late final _SCardEstablishContextPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(DWORD, LPCVOID, LPCVOID,
              LPSCARDCONTEXT)>>('SCardEstablishContext');
  late final _SCardEstablishContext = _SCardEstablishContextPtr.asFunction<
      int Function(int, LPCVOID, LPCVOID, LPSCARDCONTEXT)>();

  int SCardReleaseContext(
    int hContext,
  ) {
    return _SCardReleaseContext(
      hContext,
    );
  }

  late final _SCardReleaseContextPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT)>>(
          'SCardReleaseContext');
  late final _SCardReleaseContext =
      _SCardReleaseContextPtr.asFunction<int Function(int)>();

  int SCardIsValidContext(
    int hContext,
  ) {
    return _SCardIsValidContext(
      hContext,
    );
  }

  late final _SCardIsValidContextPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT)>>(
          'SCardIsValidContext');
  late final _SCardIsValidContext =
      _SCardIsValidContextPtr.asFunction<int Function(int)>();

  int SCardConnect(
    int hContext,
    LPCSTR szReader,
    int dwShareMode,
    int dwPreferredProtocols,
    LPSCARDHANDLE phCard,
    LPDWORD pdwActiveProtocol,
  ) {
    return _SCardConnect(
      hContext,
      szReader,
      dwShareMode,
      dwPreferredProtocols,
      phCard,
      pdwActiveProtocol,
    );
  }

  late final _SCardConnectPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, LPCSTR, DWORD, DWORD, LPSCARDHANDLE,
              LPDWORD)>>('SCardConnect');
  late final _SCardConnect = _SCardConnectPtr.asFunction<
      int Function(int, LPCSTR, int, int, LPSCARDHANDLE, LPDWORD)>();

  int SCardReconnect(
    int hCard,
    int dwShareMode,
    int dwPreferredProtocols,
    int dwInitialization,
    LPDWORD pdwActiveProtocol,
  ) {
    return _SCardReconnect(
      hCard,
      dwShareMode,
      dwPreferredProtocols,
      dwInitialization,
      pdwActiveProtocol,
    );
  }

  late final _SCardReconnectPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(
              SCARDHANDLE, DWORD, DWORD, DWORD, LPDWORD)>>('SCardReconnect');
  late final _SCardReconnect = _SCardReconnectPtr.asFunction<
      int Function(int, int, int, int, LPDWORD)>();

  int SCardDisconnect(
    int hCard,
    int dwDisposition,
  ) {
    return _SCardDisconnect(
      hCard,
      dwDisposition,
    );
  }

  late final _SCardDisconnectPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDHANDLE, DWORD)>>(
          'SCardDisconnect');
  late final _SCardDisconnect =
      _SCardDisconnectPtr.asFunction<int Function(int, int)>();

  int SCardBeginTransaction(
    int hCard,
  ) {
    return _SCardBeginTransaction(
      hCard,
    );
  }

  late final _SCardBeginTransactionPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDHANDLE)>>(
          'SCardBeginTransaction');
  late final _SCardBeginTransaction =
      _SCardBeginTransactionPtr.asFunction<int Function(int)>();

  int SCardEndTransaction(
    int hCard,
    int dwDisposition,
  ) {
    return _SCardEndTransaction(
      hCard,
      dwDisposition,
    );
  }

  late final _SCardEndTransactionPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDHANDLE, DWORD)>>(
          'SCardEndTransaction');
  late final _SCardEndTransaction =
      _SCardEndTransactionPtr.asFunction<int Function(int, int)>();

  int SCardStatus(
    int hCard,
    LPSTR mszReaderName,
    LPDWORD pcchReaderLen,
    LPDWORD pdwState,
    LPDWORD pdwProtocol,
    LPBYTE pbAtr,
    LPDWORD pcbAtrLen,
  ) {
    return _SCardStatus(
      hCard,
      mszReaderName,
      pcchReaderLen,
      pdwState,
      pdwProtocol,
      pbAtr,
      pcbAtrLen,
    );
  }

  late final _SCardStatusPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDHANDLE, LPSTR, LPDWORD, LPDWORD, LPDWORD, LPBYTE,
              LPDWORD)>>('SCardStatus');
  late final _SCardStatus = _SCardStatusPtr.asFunction<
      int Function(int, LPSTR, LPDWORD, LPDWORD, LPDWORD, LPBYTE, LPDWORD)>();

  int SCardGetStatusChange(
    int hContext,
    int dwTimeout,
    ffi.Pointer<SCARD_READERSTATE> rgReaderStates,
    int cReaders,
  ) {
    return _SCardGetStatusChange(
      hContext,
      dwTimeout,
      rgReaderStates,
      cReaders,
    );
  }

  late final _SCardGetStatusChangePtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDCONTEXT, DWORD, ffi.Pointer<SCARD_READERSTATE>,
              DWORD)>>('SCardGetStatusChange');
  late final _SCardGetStatusChange = _SCardGetStatusChangePtr.asFunction<
      int Function(int, int, ffi.Pointer<SCARD_READERSTATE>, int)>();

  int SCardControl(
    int hCard,
    int dwControlCode,
    LPCVOID pbSendBuffer,
    int cbSendLength,
    LPVOID pbRecvBuffer,
    int cbRecvLength,
    LPDWORD lpBytesReturned,
  ) {
    return _SCardControl(
      hCard,
      dwControlCode,
      pbSendBuffer,
      cbSendLength,
      pbRecvBuffer,
      cbRecvLength,
      lpBytesReturned,
    );
  }

  late final _SCardControlPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDHANDLE, DWORD, LPCVOID, DWORD, LPVOID, DWORD,
              LPDWORD)>>('SCardControl');
  late final _SCardControl = _SCardControlPtr.asFunction<
      int Function(int, int, LPCVOID, int, LPVOID, int, LPDWORD)>();

  int SCardTransmit(
    int hCard,
    ffi.Pointer<SCARD_IO_REQUEST> pioSendPci,
    LPCBYTE pbSendBuffer,
    int cbSendLength,
    ffi.Pointer<SCARD_IO_REQUEST> pioRecvPci,
    LPBYTE pbRecvBuffer,
    LPDWORD pcbRecvLength,
  ) {
    return _SCardTransmit(
      hCard,
      pioSendPci,
      pbSendBuffer,
      cbSendLength,
      pioRecvPci,
      pbRecvBuffer,
      pcbRecvLength,
    );
  }

  late final _SCardTransmitPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(
              SCARDHANDLE,
              ffi.Pointer<SCARD_IO_REQUEST>,
              LPCBYTE,
              DWORD,
              ffi.Pointer<SCARD_IO_REQUEST>,
              LPBYTE,
              LPDWORD)>>('SCardTransmit');
  late final _SCardTransmit = _SCardTransmitPtr.asFunction<
      int Function(int, ffi.Pointer<SCARD_IO_REQUEST>, LPCBYTE, int,
          ffi.Pointer<SCARD_IO_REQUEST>, LPBYTE, LPDWORD)>();

  int SCardListReaderGroups(
    int hContext,
    LPSTR mszGroups,
    LPDWORD pcchGroups,
  ) {
    return _SCardListReaderGroups(
      hContext,
      mszGroups,
      pcchGroups,
    );
  }

  late final _SCardListReaderGroupsPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPSTR, LPDWORD)>>(
          'SCardListReaderGroups');
  late final _SCardListReaderGroups =
      _SCardListReaderGroupsPtr.asFunction<int Function(int, LPSTR, LPDWORD)>();

  int SCardListReaders(
    int hContext,
    LPCSTR mszGroups,
    LPSTR mszReaders,
    LPDWORD pcchReaders,
  ) {
    return _SCardListReaders(
      hContext,
      mszGroups,
      mszReaders,
      pcchReaders,
    );
  }

  late final _SCardListReadersPtr = _lookup<
          ffi
          .NativeFunction<LONG Function(SCARDCONTEXT, LPCSTR, LPSTR, LPDWORD)>>(
      'SCardListReaders');
  late final _SCardListReaders = _SCardListReadersPtr.asFunction<
      int Function(int, LPCSTR, LPSTR, LPDWORD)>();

  int SCardFreeMemory(
    int hContext,
    LPCVOID pvMem,
  ) {
    return _SCardFreeMemory(
      hContext,
      pvMem,
    );
  }

  late final _SCardFreeMemoryPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT, LPCVOID)>>(
          'SCardFreeMemory');
  late final _SCardFreeMemory =
      _SCardFreeMemoryPtr.asFunction<int Function(int, LPCVOID)>();

  int SCardCancel(
    int hContext,
  ) {
    return _SCardCancel(
      hContext,
    );
  }

  late final _SCardCancelPtr =
      _lookup<ffi.NativeFunction<LONG Function(SCARDCONTEXT)>>('SCardCancel');
  late final _SCardCancel = _SCardCancelPtr.asFunction<int Function(int)>();

  int SCardGetAttrib(
    int hCard,
    int dwAttrId,
    LPBYTE pbAttr,
    LPDWORD pcbAttrLen,
  ) {
    return _SCardGetAttrib(
      hCard,
      dwAttrId,
      pbAttr,
      pcbAttrLen,
    );
  }

  late final _SCardGetAttribPtr = _lookup<
          ffi
          .NativeFunction<LONG Function(SCARDHANDLE, DWORD, LPBYTE, LPDWORD)>>(
      'SCardGetAttrib');
  late final _SCardGetAttrib =
      _SCardGetAttribPtr.asFunction<int Function(int, int, LPBYTE, LPDWORD)>();

  int SCardSetAttrib(
    int hCard,
    int dwAttrId,
    LPCBYTE pbAttr,
    int cbAttrLen,
  ) {
    return _SCardSetAttrib(
      hCard,
      dwAttrId,
      pbAttr,
      cbAttrLen,
    );
  }

  late final _SCardSetAttribPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(SCARDHANDLE, DWORD, LPCBYTE, DWORD)>>('SCardSetAttrib');
  late final _SCardSetAttrib =
      _SCardSetAttribPtr.asFunction<int Function(int, int, LPCBYTE, int)>();
}

typedef BYTE = ffi.UnsignedChar;
typedef DartBYTE = int;
typedef UCHAR = ffi.UnsignedChar;
typedef DartUCHAR = int;
typedef PUCHAR = ffi.Pointer<UCHAR>;
typedef USHORT = ffi.UnsignedShort;
typedef DartUSHORT = int;
typedef ULONG = ffi.UnsignedLong;
typedef DartULONG = int;
typedef LPVOID = ffi.Pointer<ffi.Void>;
typedef LPCVOID = ffi.Pointer<ffi.Void>;
typedef DWORD = ffi.UnsignedLong;
typedef DartDWORD = int;
typedef PDWORD = ffi.Pointer<DWORD>;
typedef LONG = ffi.Long;
typedef DartLONG = int;
typedef LPCSTR = ffi.Pointer<ffi.Char>;
typedef LPCBYTE = ffi.Pointer<BYTE>;
typedef LPBYTE = ffi.Pointer<BYTE>;
typedef LPDWORD = ffi.Pointer<DWORD>;
typedef LPSTR = ffi.Pointer<ffi.Char>;
typedef LPTSTR = LPSTR;
typedef LPCTSTR = LPCSTR;
typedef BOOL = ffi.Short;
typedef DartBOOL = int;
typedef WORD = ffi.UnsignedShort;
typedef DartWORD = int;
typedef PULONG = ffi.Pointer<ULONG>;
typedef SCARDCONTEXT = LONG;
typedef PSCARDCONTEXT = ffi.Pointer<SCARDCONTEXT>;
typedef LPSCARDCONTEXT = ffi.Pointer<SCARDCONTEXT>;
typedef SCARDHANDLE = LONG;
typedef PSCARDHANDLE = ffi.Pointer<SCARDHANDLE>;
typedef LPSCARDHANDLE = ffi.Pointer<SCARDHANDLE>;

final class SCARD_READERSTATE extends ffi.Struct {
  external ffi.Pointer<ffi.Char> szReader;

  external ffi.Pointer<ffi.Void> pvUserData;

  @DWORD()
  external int dwCurrentState;

  @DWORD()
  external int dwEventState;

  @DWORD()
  external int cbAtr;

  @ffi.Array.multi([33])
  external ffi.Array<ffi.UnsignedChar> rgbAtr;
}

typedef LPSCARD_READERSTATE = ffi.Pointer<SCARD_READERSTATE>;

/// Protocol Control Information (PCI)
final class SCARD_IO_REQUEST extends ffi.Struct {
  /// < Protocol identifier
  @ffi.UnsignedLong()
  external int dwProtocol;

  /// < Protocol Control Inf Length
  @ffi.UnsignedLong()
  external int cbPciLength;
}

/// Protocol Control Information (PCI)
typedef PSCARD_IO_REQUEST = ffi.Pointer<SCARD_IO_REQUEST>;
typedef LPSCARD_IO_REQUEST = ffi.Pointer<SCARD_IO_REQUEST>;
typedef LPCSCARD_IO_REQUEST = ffi.Pointer<SCARD_IO_REQUEST>;

const int MAX_ATR_SIZE = 33;

const int SCARD_S_SUCCESS = 0;

const int SCARD_F_INTERNAL_ERROR = 2148532225;

const int SCARD_E_CANCELLED = 2148532226;

const int SCARD_E_INVALID_HANDLE = 2148532227;

const int SCARD_E_INVALID_PARAMETER = 2148532228;

const int SCARD_E_INVALID_TARGET = 2148532229;

const int SCARD_E_NO_MEMORY = 2148532230;

const int SCARD_F_WAITED_TOO_LONG = 2148532231;

const int SCARD_E_INSUFFICIENT_BUFFER = 2148532232;

const int SCARD_E_UNKNOWN_READER = 2148532233;

const int SCARD_E_TIMEOUT = 2148532234;

const int SCARD_E_SHARING_VIOLATION = 2148532235;

const int SCARD_E_NO_SMARTCARD = 2148532236;

const int SCARD_E_UNKNOWN_CARD = 2148532237;

const int SCARD_E_CANT_DISPOSE = 2148532238;

const int SCARD_E_PROTO_MISMATCH = 2148532239;

const int SCARD_E_NOT_READY = 2148532240;

const int SCARD_E_INVALID_VALUE = 2148532241;

const int SCARD_E_SYSTEM_CANCELLED = 2148532242;

const int SCARD_F_COMM_ERROR = 2148532243;

const int SCARD_F_UNKNOWN_ERROR = 2148532244;

const int SCARD_E_INVALID_ATR = 2148532245;

const int SCARD_E_NOT_TRANSACTED = 2148532246;

const int SCARD_E_READER_UNAVAILABLE = 2148532247;

const int SCARD_P_SHUTDOWN = 2148532248;

const int SCARD_E_PCI_TOO_SMALL = 2148532249;

const int SCARD_E_READER_UNSUPPORTED = 2148532250;

const int SCARD_E_DUPLICATE_READER = 2148532251;

const int SCARD_E_CARD_UNSUPPORTED = 2148532252;

const int SCARD_E_NO_SERVICE = 2148532253;

const int SCARD_E_SERVICE_STOPPED = 2148532254;

const int SCARD_E_UNEXPECTED = 2148532255;

const int SCARD_E_UNSUPPORTED_FEATURE = 2148532255;

const int SCARD_E_ICC_INSTALLATION = 2148532256;

const int SCARD_E_ICC_CREATEORDER = 2148532257;

const int SCARD_E_DIR_NOT_FOUND = 2148532259;

const int SCARD_E_FILE_NOT_FOUND = 2148532260;

const int SCARD_E_NO_DIR = 2148532261;

const int SCARD_E_NO_FILE = 2148532262;

const int SCARD_E_NO_ACCESS = 2148532263;

const int SCARD_E_WRITE_TOO_MANY = 2148532264;

const int SCARD_E_BAD_SEEK = 2148532265;

const int SCARD_E_INVALID_CHV = 2148532266;

const int SCARD_E_UNKNOWN_RES_MNG = 2148532267;

const int SCARD_E_NO_SUCH_CERTIFICATE = 2148532268;

const int SCARD_E_CERTIFICATE_UNAVAILABLE = 2148532269;

const int SCARD_E_NO_READERS_AVAILABLE = 2148532270;

const int SCARD_E_COMM_DATA_LOST = 2148532271;

const int SCARD_E_NO_KEY_CONTAINER = 2148532272;

const int SCARD_E_SERVER_TOO_BUSY = 2148532273;

const int SCARD_W_UNSUPPORTED_CARD = 2148532325;

const int SCARD_W_UNRESPONSIVE_CARD = 2148532326;

const int SCARD_W_UNPOWERED_CARD = 2148532327;

const int SCARD_W_RESET_CARD = 2148532328;

const int SCARD_W_REMOVED_CARD = 2148532329;

const int SCARD_W_SECURITY_VIOLATION = 2148532330;

const int SCARD_W_WRONG_CHV = 2148532331;

const int SCARD_W_CHV_BLOCKED = 2148532332;

const int SCARD_W_EOF = 2148532333;

const int SCARD_W_CANCELLED_BY_USER = 2148532334;

const int SCARD_W_CARD_NOT_AUTHENTICATED = 2148532335;

const int SCARD_AUTOALLOCATE = -1;

const int SCARD_SCOPE_USER = 0;

const int SCARD_SCOPE_TERMINAL = 1;

const int SCARD_SCOPE_SYSTEM = 2;

const int SCARD_SCOPE_GLOBAL = 3;

const int SCARD_PROTOCOL_UNDEFINED = 0;

const int SCARD_PROTOCOL_UNSET = 0;

const int SCARD_PROTOCOL_T0 = 1;

const int SCARD_PROTOCOL_T1 = 2;

const int SCARD_PROTOCOL_RAW = 4;

const int SCARD_PROTOCOL_T15 = 8;

const int SCARD_PROTOCOL_ANY = 3;

const int SCARD_SHARE_EXCLUSIVE = 1;

const int SCARD_SHARE_SHARED = 2;

const int SCARD_SHARE_DIRECT = 3;

const int SCARD_LEAVE_CARD = 0;

const int SCARD_RESET_CARD = 1;

const int SCARD_UNPOWER_CARD = 2;

const int SCARD_EJECT_CARD = 3;

const int SCARD_UNKNOWN = 1;

const int SCARD_ABSENT = 2;

const int SCARD_PRESENT = 4;

const int SCARD_SWALLOWED = 8;

const int SCARD_POWERED = 16;

const int SCARD_NEGOTIABLE = 32;

const int SCARD_SPECIFIC = 64;

const int SCARD_STATE_UNAWARE = 0;

const int SCARD_STATE_IGNORE = 1;

const int SCARD_STATE_CHANGED = 2;

const int SCARD_STATE_UNKNOWN = 4;

const int SCARD_STATE_UNAVAILABLE = 8;

const int SCARD_STATE_EMPTY = 16;

const int SCARD_STATE_PRESENT = 32;

const int SCARD_STATE_ATRMATCH = 64;

const int SCARD_STATE_EXCLUSIVE = 128;

const int SCARD_STATE_INUSE = 256;

const int SCARD_STATE_MUTE = 512;

const int SCARD_STATE_UNPOWERED = 1024;

const int INFINITE = 4294967295;

const String PCSCLITE_VERSION_NUMBER = '1.9.3';

const int PCSCLITE_MAX_READERS_CONTEXTS = 16;

const int MAX_READERNAME = 128;

const int SCARD_ATR_LENGTH = 33;

const int MAX_BUFFER_SIZE = 264;

const int MAX_BUFFER_SIZE_EXTENDED = 65548;
